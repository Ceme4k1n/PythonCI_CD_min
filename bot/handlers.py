from telebot import TeleBot
from telebot.types import Message, CallbackQuery
from config.config import Config
from core.project_manager import ProjectManager
from core.docker_monitor import DockerMonitor
from utils.error_handler import ErrorHandler
from .keyboard import Keyboard
import logging

logger = logging.getLogger('handlers')

class BotHandlers:
    def __init__(
        self,
        bot: TeleBot,
        config: Config,
        project_manager: ProjectManager,
        docker_monitor: DockerMonitor,
        error_handler: ErrorHandler
    ):
        self.bot = bot
        self.config = config
        self.project_manager = project_manager
        self.docker_monitor = docker_monitor
        self.error_handler = error_handler
        self.keyboard = Keyboard()
        
        self.register_handlers()
        
    def register_handlers(self):
        # –ö–æ–º–∞–Ω–¥—ã
        self.bot.message_handler(commands=['start'])(self.handle_start)
        self.bot.message_handler(commands=['help'])(self.handle_help)
        
        # Callback –∑–∞–ø—Ä–æ—Å—ã
        self.bot.callback_query_handler(func=lambda call: True)(self.handle_callback)
        
    @ErrorHandler.handle_error
    async def handle_start(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await self.project_manager.db.get_user(str(message.from_user.id))
            if not user:
                user = await self.project_manager.db.create_user(
                    str(message.from_user.id),
                    message.from_user.username or "unknown"
                )
                
            welcome_text = (
                f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.username}!\n\n"
                "ü§ñ –Ø - –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è CI/CD –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏.\n\n"
                "–ß—Ç–æ —è —É–º–µ—é:\n"
                "‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–æ–µ–∫—Ç–∞–º–∏\n"
                "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ Git\n"
                "‚Ä¢ –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç—ã –≤ Docker\n"
                "‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –ª–æ–≥–∏\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:"
            )
            
            await self.bot.send_message(
                message.chat.id,
                welcome_text,
                reply_markup=self.keyboard.main_menu()
            )
        except Exception as e:
            logger.error(f"Error in handle_start: {str(e)}")
            await self.bot.send_message(
                message.chat.id,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        
    @staticmethod
    @ErrorHandler.handle_error
    async def handle_help(self, message: Message):
        help_text = """
*CI/CD Bot - –°–ø—Ä–∞–≤–∫–∞*

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–µ–ø–ª–æ—è
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤
‚Ä¢ –û—Ç–∫–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–∏–º –≤–µ—Ä—Å–∏—è–º
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Docker

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ /start
        """
        await self.bot.send_message(
            message.chat.id,
            help_text,
            parse_mode='Markdown'
        )
        
    @ErrorHandler.handle_error
    async def handle_callback(self, call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        try:
            user = await self.project_manager.db.get_user(str(call.from_user.id))
            if not user:
                await self.bot.answer_callback_query(
                    call.id,
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start"
                )
                return
            
            if call.data == "add_project":
                await self.handle_add_project(call, user)
            elif call.data == "settings":
                await self.bot.edit_message_text(
                    "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:",
                    call.message.chat.id,
                    call.message.message_id,
                    reply_markup=self.keyboard.settings_menu()
                )
            elif call.data == "deploy":
                await self.handle_deploy(call, user)
            elif call.data == "stats":
                await self.handle_stats(call, user)
            elif call.data == "help":
                await self.handle_help(call.message)
            elif call.data == "back_to_main":
                await self.bot.edit_message_text(
                    "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                    call.message.chat.id,
                    call.message.message_id,
                    reply_markup=self.keyboard.main_menu()
                )
            elif call.data.startswith("confirm_"):
                await self.handle_confirmation(call, user)
            
            await self.bot.answer_callback_query(call.id)
            
        except Exception as e:
            logger.error(f"Error in handle_callback: {str(e)}")
            await self.bot.answer_callback_query(
                call.id,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            
    @ErrorHandler.handle_error
    async def handle_add_project(self, call: CallbackQuery, user):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞"""
        instruction = (
            "üìù –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "name|repo_url|branch\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "my_project|https://github.com/user/repo|main"
        )
        await self.bot.edit_message_text(
            instruction,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=self.keyboard.confirm_menu("add", 0)
        )
        
    @ErrorHandler.handle_error
    async def handle_stats(self, call: CallbackQuery, user):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        stats = self.docker_monitor.get_container_stats("cicd_bot")
        if stats:
            stats_text = (
                "*üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã*\n\n"
                f"CPU: {stats['cpu_percent']}%\n"
                f"RAM: {stats['memory_percent']}%\n"
                f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {stats['memory_usage']}\n"
                f"–í—Å–µ–≥–æ: {stats['memory_limit']}"
            )
        else:
            stats_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
            
        await self.bot.edit_message_text(
            stats_text,
            call.message.chat.id,
            call.message.message_id,
            parse_mode='Markdown',
            reply_markup=self.keyboard.main_menu()
        ) 