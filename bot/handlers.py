from telebot import TeleBot
from telebot.types import Message, CallbackQuery
from config.config import Config
from core.project_manager import ProjectManager
from core.docker_monitor import DockerMonitor
from utils.error_handler import ErrorHandler
from .keyboard import Keyboard
from core.version_manager import VersionManager
from core.test_environment import TestEnvironment
import logging

logger = logging.getLogger('handlers')

class BotHandlers:
    def __init__(
        self,
        bot: TeleBot,
        config: Config,
        project_manager: ProjectManager,
        docker_monitor: DockerMonitor,
        error_handler: ErrorHandler
    ):
        self.bot = bot
        self.config = config
        self.project_manager = project_manager
        self.docker_monitor = docker_monitor
        self.error_handler = error_handler
        self.keyboard = Keyboard()
        
        self.register_handlers()
        
    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.bot.message_handler(commands=['start'])(self.handle_start)
        self.bot.message_handler(commands=['help'])(self.handle_help)
        
        # –í–∞–∂–Ω–æ: —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.bot.message_handler(content_types=['text'])(self.handle_message)
        
        # Callback –∑–∞–ø—Ä–æ—Å—ã - –≤—Å–µ —á–µ—Ä–µ–∑ handle_callback
        self.bot.callback_query_handler(func=lambda call: True)(self.handle_callback)
        
    @ErrorHandler.handle_error
    async def handle_start(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await self.project_manager.db.get_user(str(message.from_user.id))
            if not user:
                user = await self.project_manager.db.create_user(
                    str(message.from_user.id),
                    message.from_user.username or "unknown"
                )
                
            welcome_text = (
                f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.username}!\n\n"
                "ü§ñ –Ø - –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è CI/CD –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏.\n\n"
                "–ß—Ç–æ —è —É–º–µ—é:\n"
                "‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–æ–µ–∫—Ç–∞–º–∏\n"
                "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ Git\n"
                "‚Ä¢ –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç—ã –≤ Docker\n"
                "‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –ª–æ–≥–∏\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:"
            )
            
            await self.bot.send_message(
                message.chat.id,
                welcome_text,
                reply_markup=self.keyboard.main_menu()
            )
        except Exception as e:
            logger.error(f"Error in handle_start: {str(e)}")
            await self.bot.send_message(
                message.chat.id,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        
    @ErrorHandler.handle_error
    async def handle_help(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
*CI/CD Bot - –°–ø—Ä–∞–≤–∫–∞*

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–µ–ø–ª–æ—è
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤
‚Ä¢ –û—Ç–∫–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–∏–º –≤–µ—Ä—Å–∏—è–º
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Docker

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ /start
        """
        await self.bot.send_message(
            message.chat.id,
            help_text,
            parse_mode='Markdown'
        )
        
    @ErrorHandler.handle_error
    async def handle_callback(self, call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—Å–µ—Ö callback –∑–∞–ø—Ä–æ—Å–æ–≤
            user = await self.project_manager.db.get_user(str(call.from_user.id))
            if not user:
                await self.bot.answer_callback_query(
                    call.id,
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start"
                )
                return
            
            # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è callback –∑–∞–ø—Ä–æ—Å–æ–≤
            if call.data == "add_project":
                await self.handle_add_project(call, user)
            elif call.data == "settings":
                await self.handle_settings(call, user)
            elif call.data == "logs":
                await self.handle_logs(call, user)
            elif call.data == "intervals":
                await self.handle_intervals(call, user)
            elif call.data == "deploy":
                await self.handle_deploy(call, user)
            elif call.data == "stats":
                await self.handle_stats(call, user)
            elif call.data.startswith('versions_'):
                await self.handle_versions(call, user)
            elif call.data.startswith('rollback_'):
                await self.handle_rollback(call, user)
            elif call.data.startswith('test_'):
                await self.handle_test_environment(call, user)
            elif call.data == "back_to_main":
                await self.bot.edit_message_text(
                    "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                    call.message.chat.id,
                    call.message.message_id,
                    reply_markup=self.keyboard.main_menu()
                )
            elif call.data.startswith("confirm_"):
                await self.handle_confirmation(call, user)
            
            await self.bot.answer_callback_query(call.id)
            
        except Exception as e:
            logger.error(f"Error in handle_callback: {str(e)}")
            await self.bot.answer_callback_query(
                call.id,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            
    @ErrorHandler.handle_error
    async def handle_add_project(self, call: CallbackQuery, user):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            instruction = (
                "üìù –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "name|repo_url|branch\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                "my_project|https://github.com/user/repo|main"
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –æ–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞
            self.waiting_for_project_data = True
            
            await self.bot.edit_message_text(
                instruction,
                call.message.chat.id,
                call.message.message_id,
                reply_markup=self.keyboard.main_menu()
            )
        except Exception as e:
            logger.error(f"Error in handle_add_project: {str(e)}")
            await self.bot.answer_callback_query(
                call.id,
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞"
            )

    @ErrorHandler.handle_error
    async def handle_message(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            if hasattr(self, 'waiting_for_project_data') and self.waiting_for_project_data:
                # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞
                try:
                    name, repo_url, branch = message.text.strip().split('|')
                    
                    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç
                    project = await self.project_manager.create_project(
                        user_id=message.from_user.id,
                        name=name.strip(),
                        repo_url=repo_url.strip(),
                        branch=branch.strip()
                    )
                    
                    # –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
                    if await self.project_manager.clone_repository(project):
                        await self.bot.reply_to(
                            message,
                            f"‚úÖ –ü—Ä–æ–µ–∫—Ç {name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∏ —Å–∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω",
                            reply_markup=self.keyboard.main_menu()
                        )
                    else:
                        await self.bot.reply_to(
                            message,
                            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è {repo_url}"
                        )
                        
                except ValueError:
                    await self.bot.reply_to(
                        message,
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: name|repo_url|branch"
                    )
                    
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                self.waiting_for_project_data = False
                
        except Exception as e:
            logger.error(f"Error in handle_message: {str(e)}")
            await self.bot.reply_to(
                message,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è"
            )
        
    @ErrorHandler.handle_error
    async def handle_stats(self, call: CallbackQuery, user):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            if not self.docker_monitor:
                await self.bot.edit_message_text(
                    "‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Docker –æ—Ç–∫–ª—é—á–µ–Ω",
                    call.message.chat.id,
                    call.message.message_id,
                    reply_markup=self.keyboard.main_menu()
                )
                return
            
            stats = self.docker_monitor.get_container_stats("cicd_bot")
            if stats:
                stats_text = (
                    "*üìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã*\n\n"
                    f"CPU: {stats['cpu_percent']}%\n"
                    f"RAM: {stats['memory_percent']}%\n"
                    f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {stats['memory_usage']}\n"
                    f"–í—Å–µ–≥–æ: {stats['memory_limit']}"
                )
            else:
                stats_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
            
            await self.bot.edit_message_text(
                stats_text,
                call.message.chat.id,
                call.message.message_id,
                parse_mode='Markdown',
                reply_markup=self.keyboard.main_menu()
            )
        except Exception as e:
            logger.error(f"Error in handle_stats: {str(e)}")
            await self.bot.answer_callback_query(
                call.id,
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
            )
        
    @ErrorHandler.handle_error
    async def handle_versions(self, call: CallbackQuery, user):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤–µ—Ä—Å–∏–π –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            project_id = int(call.data.split('_')[1])
            project = await self.project_manager.get_project(project_id)
            
            version_manager = VersionManager(project.project_path)
            versions = version_manager.get_versions()
            
            if not versions:
                await self.bot.edit_message_text(
                    "‚ùå –í–µ—Ä—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                    call.message.chat.id,
                    call.message.message_id
                )
                return
            
            versions_text = "*üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–µ—Ä—Å–∏–∏:*\n\n"
            for version in versions:
                versions_text += (
                    f"*–í–µ—Ä—Å–∏—è {version.version_number}*\n"
                    f"–î–∞—Ç–∞: {version.commit_date}\n"
                    f"–°–æ–æ–±—â–µ–Ω–∏–µ: {version.commit_message}\n"
                    f"–•—ç—à: `{version.commit_hash[:8]}`\n\n"
                )
            
            await self.bot.edit_message_text(
                versions_text,
                call.message.chat.id,
                call.message.message_id,
                parse_mode='Markdown',
                reply_markup=self.keyboard.versions_menu(project_id)
            )
            
        except Exception as e:
            logger.error(f"Error in handle_versions: {str(e)}")
            await self.bot.answer_callback_query(
                call.id,
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–µ—Ä—Å–∏–π"
            )

    @ErrorHandler.handle_error
    async def handle_rollback(self, call: CallbackQuery, user):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–∞—Ç–∞ –∫ –≤–µ—Ä—Å–∏–∏"""
        try:
            _, project_id, version = call.data.split('_')
            project_id = int(project_id)
            version = int(version)
            
            project = await self.project_manager.get_project(project_id)
            version_manager = VersionManager(project.project_path)
            
            success, message = await version_manager.rollback_to_version(version)
            
            if success:
                await self.bot.edit_message_text(
                    f"‚úÖ {message}",
                    call.message.chat.id,
                    call.message.message_id,
                    reply_markup=self.keyboard.main_menu()
                )
            else:
                await self.bot.answer_callback_query(
                    call.id,
                    f"‚ùå {message}"
                )
            
        except Exception as e:
            logger.error(f"Error in handle_rollback: {str(e)}")
            await self.bot.answer_callback_query(
                call.id,
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞—Ç–µ –≤–µ—Ä—Å–∏–∏"
            )

    @ErrorHandler.handle_error
    async def handle_test_environment(self, call: CallbackQuery, user):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        try:
            project_id = int(call.data.split('_')[1])
            project = await self.project_manager.get_project(project_id)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            test_config = await self.project_manager.get_test_config(project_id)
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
            test_env = TestEnvironment(project.project_path, test_config)
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
            success, message = await test_env.setup()
            if not success:
                await self.bot.answer_callback_query(
                    call.id,
                    f"‚ùå {message}"
                )
                return
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
            success, output = await test_env.run_tests()
            
            # –û—á–∏—â–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
            await test_env.cleanup()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report = (
                "üìã *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è*\n\n"
                f"–ü—Ä–æ–µ–∫—Ç: {project.name}\n"
                f"–°—Ç–∞—Ç—É—Å: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if success else '‚ùå –û—à–∏–±–∫–∞'}\n\n"
                "```\n"
                f"{output[:1000]}...\n"  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥
                "```"
            )
            
            await self.bot.edit_message_text(
                report,
                call.message.chat.id,
                call.message.message_id,
                parse_mode='Markdown',
                reply_markup=self.keyboard.main_menu()
            )
            
        except Exception as e:
            logger.error(f"Error in handle_test_environment: {str(e)}")
            await self.bot.answer_callback_query(
                call.id,
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"
            )

    @ErrorHandler.handle_error
    async def handle_confirmation(self, call: CallbackQuery, user):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –¥–µ–π—Å—Ç–≤–∏–π"""
        try:
            action, *params = call.data.split('_')[1:]
            
            if action == "add":
                # –õ–æ–≥–∏–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
                await self.bot.edit_message_text(
                    "‚úÖ –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω",
                    call.message.chat.id,
                    call.message.message_id,
                    reply_markup=self.keyboard.main_menu()
                )
            else:
                await self.bot.answer_callback_query(
                    call.id,
                    "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"
                )
            
        except Exception as e:
            logger.error(f"Error in handle_confirmation: {str(e)}")
            await self.bot.answer_callback_query(
                call.id,
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
            )

    @ErrorHandler.handle_error
    async def handle_deploy(self, call: CallbackQuery, user):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –¥–µ–ø–ª–æ–π"""
        try:
            projects = await self.project_manager.get_projects(user.id)
            if not projects:
                await self.bot.edit_message_text(
                    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤",
                    call.message.chat.id,
                    call.message.message_id,
                    reply_markup=self.keyboard.main_menu()
                )
                return
            
            await self.bot.edit_message_text(
                "üìã –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –¥–µ–ø–ª–æ—è:",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=self.keyboard.project_list(projects)
            )
            
        except Exception as e:
            logger.error(f"Error in handle_deploy: {str(e)}")
            await self.bot.answer_callback_query(
                call.id,
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–ø–ª–æ—è"
            )

    @ErrorHandler.handle_error
    async def handle_settings(self, call: CallbackQuery, user):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            settings_text = (
                "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫:"
            )
            
            await self.bot.edit_message_text(
                settings_text,
                call.message.chat.id,
                call.message.message_id,
                parse_mode='Markdown',
                reply_markup=self.keyboard.settings_menu()
            )
        except Exception as e:
            logger.error(f"Error in handle_settings: {str(e)}")
            await self.bot.answer_callback_query(
                call.id,
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"
            )

    @ErrorHandler.handle_error
    async def handle_logs(self, call: CallbackQuery, user):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤"""
        try:
            with open('bot.log', 'r') as f:
                logs = f.readlines()[-self.config.max_log_lines:]
                
            log_text = (
                "*üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:*\n\n"
                "```\n"
                f"{''.join(logs)}\n"
                "```"
            )
            
            await self.bot.edit_message_text(
                log_text[:4000],  # Telegram –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
                call.message.chat.id,
                call.message.message_id,
                parse_mode='Markdown',
                reply_markup=self.keyboard.settings_menu()
            )
        except Exception as e:
            logger.error(f"Error in handle_logs: {str(e)}")
            await self.bot.answer_callback_query(
                call.id,
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤"
            )

    @ErrorHandler.handle_error
    async def handle_intervals(self, call: CallbackQuery, user):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤"""
        try:
            intervals_text = (
                "*‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã:*\n\n"
                f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ Git: {self.config.default_check_interval} —Å–µ–∫\n"
                f"‚Ä¢ –¢–∞–π–º–∞—É—Ç —Ç–µ—Å—Ç–æ–≤: {self.config.test_timeout} —Å–µ–∫\n\n"
                "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
                "`/interval git 300`\n"
                "–∏–ª–∏\n"
                "`/interval test 600`"
            )
            
            await self.bot.edit_message_text(
                intervals_text,
                call.message.chat.id,
                call.message.message_id,
                parse_mode='Markdown',
                reply_markup=self.keyboard.settings_menu()
            )
        except Exception as e:
            logger.error(f"Error in handle_intervals: {str(e)}")
            await self.bot.answer_callback_query(
                call.id,
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤"
            ) 